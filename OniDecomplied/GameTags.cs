// Decompiled with JetBrains decompiler
// Type: GameTags
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D13CBB0B-55A9-4EF0-9BB5-5C2436A6B8EE
// Assembly location: D:\dev\OniMod\Assembly-CSharp.dll

using System.Collections.Generic;

public class GameTags
{
  public static readonly Tag DeprecatedContent = TagManager.Create(nameof (DeprecatedContent));
  public static readonly Tag Any = TagManager.Create(nameof (Any));
  public static readonly Tag SpawnsInWorld = TagManager.Create(nameof (SpawnsInWorld));
  public static readonly Tag Experimental = TagManager.Create(nameof (Experimental));
  public static readonly Tag Gravitas = TagManager.Create(nameof (Gravitas));
  public static readonly Tag Miscellaneous = TagManager.Create(nameof (Miscellaneous));
  public static readonly Tag Specimen = TagManager.Create(nameof (Specimen));
  public static readonly Tag Seed = TagManager.Create(nameof (Seed));
  public static readonly Tag Edible = TagManager.Create(nameof (Edible));
  public static readonly Tag CookingIngredient = TagManager.Create(nameof (CookingIngredient));
  public static readonly Tag Medicine = TagManager.Create(nameof (Medicine));
  public static readonly Tag MedicalSupplies = TagManager.Create(nameof (MedicalSupplies));
  public static readonly Tag Plant = TagManager.Create(nameof (Plant));
  public static readonly Tag GrowingPlant = TagManager.Create(nameof (GrowingPlant));
  public static readonly Tag Pickupable = TagManager.Create(nameof (Pickupable));
  public static readonly Tag Liquifiable = TagManager.Create(nameof (Liquifiable));
  public static readonly Tag IceOre = TagManager.Create(nameof (IceOre));
  public static readonly Tag OxyRock = TagManager.Create(nameof (OxyRock));
  public static readonly Tag Life = TagManager.Create(nameof (Life));
  public static readonly Tag Fertilizer = TagManager.Create(nameof (Fertilizer));
  public static readonly Tag Farmable = TagManager.Create(nameof (Farmable));
  public static readonly Tag Agriculture = TagManager.Create(nameof (Agriculture));
  public static readonly Tag Organics = TagManager.Create(nameof (Organics));
  public static readonly Tag IndustrialProduct = TagManager.Create(nameof (IndustrialProduct));
  public static readonly Tag IndustrialIngredient = TagManager.Create(nameof (IndustrialIngredient));
  public static readonly Tag Other = TagManager.Create(nameof (Other));
  public static readonly Tag ManufacturedMaterial = TagManager.Create(nameof (ManufacturedMaterial));
  public static readonly Tag Plastic = TagManager.Create(nameof (Plastic));
  public static readonly Tag Steel = TagManager.Create(nameof (Steel));
  public static readonly Tag BuildableAny = TagManager.Create(nameof (BuildableAny));
  public static readonly Tag Decoration = TagManager.Create(nameof (Decoration));
  public static readonly Tag Window = TagManager.Create(nameof (Window));
  public static readonly Tag Bunker = TagManager.Create(nameof (Bunker));
  public static readonly Tag Transition = TagManager.Create(nameof (Transition));
  public static readonly Tag Detecting = TagManager.Create(nameof (Detecting));
  public static readonly Tag RareMaterials = TagManager.Create(nameof (RareMaterials));
  public static readonly Tag BuildingFiber = TagManager.Create(nameof (BuildingFiber));
  public static readonly Tag BuildingWood = TagManager.Create(nameof (BuildingWood));
  public static readonly Tag PreciousRock = TagManager.Create(nameof (PreciousRock));
  public static readonly Tag Artifact = TagManager.Create(nameof (Artifact));
  public static readonly Tag CharmedArtifact = TagManager.Create(nameof (CharmedArtifact));
  public static readonly Tag TerrestrialArtifact = TagManager.Create(nameof (TerrestrialArtifact));
  public static readonly Tag Keepsake = TagManager.Create(nameof (Keepsake));
  public static readonly Tag MiscPickupable = TagManager.Create(nameof (MiscPickupable));
  public static readonly Tag CombustibleGas = TagManager.Create(nameof (CombustibleGas));
  public static readonly Tag CombustibleLiquid = TagManager.Create(nameof (CombustibleLiquid));
  public static readonly Tag CombustibleSolid = TagManager.Create(nameof (CombustibleSolid));
  public static readonly Tag FlyingCritterEdible = TagManager.Create(nameof (FlyingCritterEdible));
  public static readonly Tag Comet = TagManager.Create(nameof (Comet));
  public static readonly Tag DeadReactor = TagManager.Create(nameof (DeadReactor));
  public static readonly Tag Robot = TagManager.Create(nameof (Robot));
  public static readonly Tag StoryTraitResource = TagManager.Create(nameof (StoryTraitResource));
  public static readonly Tag Incapacitated = TagManager.Create(nameof (Incapacitated));
  public static readonly Tag CaloriesDepleted = TagManager.Create(nameof (CaloriesDepleted));
  public static readonly Tag HitPointsDepleted = TagManager.Create(nameof (HitPointsDepleted));
  public static readonly Tag HitByHighEnergyParticle = TagManager.Create(nameof (HitByHighEnergyParticle));
  public static readonly Tag RadiationSicknessIncapacitation = TagManager.Create("RadiationSickness");
  public static readonly Tag Wilting = TagManager.Create(nameof (Wilting));
  public static readonly Tag Blighted = TagManager.Create(nameof (Blighted));
  public static readonly Tag PreventEmittingDisease = TagManager.Create("EmittingDisease");
  public static readonly Tag Creature = TagManager.Create(nameof (Creature));
  public static readonly Tag OriginalCreature = TagManager.Create(nameof (OriginalCreature));
  public static readonly Tag Hexaped = TagManager.Create(nameof (Hexaped));
  public static readonly Tag HeatBulb = TagManager.Create(nameof (HeatBulb));
  public static readonly Tag Egg = TagManager.Create(nameof (Egg));
  public static readonly Tag IncubatableEgg = TagManager.Create(nameof (IncubatableEgg));
  public static readonly Tag Trapped = TagManager.Create(nameof (Trapped));
  public static readonly Tag BagableCreature = TagManager.Create(nameof (BagableCreature));
  public static readonly Tag SwimmingCreature = TagManager.Create(nameof (SwimmingCreature));
  public static readonly Tag Spawner = TagManager.Create(nameof (Spawner));
  public static readonly Tag FullyIncubated = TagManager.Create(nameof (FullyIncubated));
  public static readonly Tag Amphibious = TagManager.Create(nameof (Amphibious));
  public static readonly Tag MoltShell = TagManager.Create(nameof (MoltShell));
  public static readonly Tag Alloy = TagManager.Create(nameof (Alloy));
  public static readonly Tag Metal = TagManager.Create(nameof (Metal));
  public static readonly Tag RefinedMetal = TagManager.Create(nameof (RefinedMetal));
  public static readonly Tag PreciousMetal = TagManager.Create(nameof (PreciousMetal));
  public static readonly Tag StoredMetal = TagManager.Create(nameof (StoredMetal));
  public static readonly Tag Solid = TagManager.Create(nameof (Solid));
  public static readonly Tag Liquid = TagManager.Create(nameof (Liquid));
  public static readonly Tag LiquidSource = TagManager.Create(nameof (LiquidSource));
  public static readonly Tag GasSource = TagManager.Create(nameof (GasSource));
  public static readonly Tag Water = TagManager.Create(nameof (Water));
  public static readonly Tag DirtyWater = TagManager.Create(nameof (DirtyWater));
  public static readonly Tag AnyWater = TagManager.Create(nameof (AnyWater));
  public static readonly Tag Algae = TagManager.Create(nameof (Algae));
  public static readonly Tag Void = TagManager.Create(nameof (Void));
  public static readonly Tag Chlorine = TagManager.Create(nameof (Chlorine));
  public static readonly Tag Oxygen = TagManager.Create(nameof (Oxygen));
  public static readonly Tag Hydrogen = TagManager.Create(nameof (Hydrogen));
  public static readonly Tag Methane = TagManager.Create(nameof (Methane));
  public static readonly Tag CarbonDioxide = TagManager.Create(nameof (CarbonDioxide));
  public static readonly Tag Carbon = TagManager.Create(nameof (Carbon));
  public static readonly Tag BuildableRaw = TagManager.Create(nameof (BuildableRaw));
  public static readonly Tag BuildableProcessed = TagManager.Create(nameof (BuildableProcessed));
  public static readonly Tag Phosphorus = TagManager.Create(nameof (Phosphorus));
  public static readonly Tag Phosphorite = TagManager.Create(nameof (Phosphorite));
  public static readonly Tag SlimeMold = TagManager.Create(nameof (SlimeMold));
  public static readonly Tag Filler = TagManager.Create(nameof (Filler));
  public static readonly Tag Item = TagManager.Create(nameof (Item));
  public static readonly Tag Ore = TagManager.Create(nameof (Ore));
  public static readonly Tag GenericOre = TagManager.Create(nameof (GenericOre));
  public static readonly Tag Ingot = TagManager.Create(nameof (Ingot));
  public static readonly Tag Dirt = TagManager.Create(nameof (Dirt));
  public static readonly Tag Filter = TagManager.Create(nameof (Filter));
  public static readonly Tag ConsumableOre = TagManager.Create(nameof (ConsumableOre));
  public static readonly Tag Unstable = TagManager.Create(nameof (Unstable));
  public static readonly Tag EmitsLight = TagManager.Create(nameof (EmitsLight));
  public static readonly Tag Special = TagManager.Create(nameof (Special));
  public static readonly Tag Breathable = TagManager.Create(nameof (Breathable));
  public static readonly Tag Unbreathable = TagManager.Create(nameof (Unbreathable));
  public static readonly Tag Gas = TagManager.Create(nameof (Gas));
  public static readonly Tag Crushable = TagManager.Create(nameof (Crushable));
  public static readonly Tag Noncrushable = TagManager.Create(nameof (Noncrushable));
  public static readonly Tag IronOre = TagManager.Create(nameof (IronOre));
  public static readonly Tag HighEnergyParticle = TagManager.Create(nameof (HighEnergyParticle));
  public static readonly Tag IgnoreMaterialCategory = TagManager.Create(nameof (IgnoreMaterialCategory));
  public static readonly Tag Oxidizer = TagManager.Create(nameof (Oxidizer));
  public static readonly Tag Minion = TagManager.Create(nameof (Minion));
  public static readonly Tag Corpse = TagManager.Create(nameof (Corpse));
  public static readonly Tag RiverSource = TagManager.Create(nameof (RiverSource));
  public static readonly Tag RiverSink = TagManager.Create(nameof (RiverSink));
  public static readonly Tag Garbage = TagManager.Create(nameof (Garbage));
  public static readonly Tag OilWell = TagManager.Create(nameof (OilWell));
  public static readonly Tag Glass = TagManager.Create(nameof (Glass));
  public static readonly Tag Door = TagManager.Create(nameof (Door));
  public static readonly Tag Farm = TagManager.Create(nameof (Farm));
  public static readonly Tag StorageLocker = TagManager.Create(nameof (StorageLocker));
  public static readonly Tag LadderBed = TagManager.Create(nameof (LadderBed));
  public static readonly Tag FloorTiles = TagManager.Create(nameof (FloorTiles));
  public static readonly Tag Carpeted = TagManager.Create(nameof (Carpeted));
  public static readonly Tag FarmTiles = TagManager.Create(nameof (FarmTiles));
  public static readonly Tag Ladders = TagManager.Create(nameof (Ladders));
  public static readonly Tag NavTeleporters = TagManager.Create(nameof (NavTeleporters));
  public static readonly Tag Wires = TagManager.Create(nameof (Wires));
  public static readonly Tag Vents = TagManager.Create(nameof (Vents));
  public static readonly Tag Pipes = TagManager.Create(nameof (Pipes));
  public static readonly Tag WireBridges = TagManager.Create(nameof (WireBridges));
  public static readonly Tag TravelTubeBridges = TagManager.Create(nameof (TravelTubeBridges));
  public static readonly Tag Backwall = TagManager.Create(nameof (Backwall));
  public static readonly Tag MISSING_TAG = TagManager.Create(nameof (MISSING_TAG));
  public static readonly Tag PlantRenderer = TagManager.Create(nameof (PlantRenderer));
  public static readonly Tag Usable = TagManager.Create(nameof (Usable));
  public static readonly Tag PedestalDisplayable = TagManager.Create(nameof (PedestalDisplayable));
  public static readonly Tag HasChores = TagManager.Create(nameof (HasChores));
  public static readonly Tag Suit = TagManager.Create(nameof (Suit));
  public static readonly Tag AirtightSuit = TagManager.Create(nameof (AirtightSuit));
  public static readonly Tag AtmoSuit = TagManager.Create("Atmo_Suit");
  public static readonly Tag OxygenMask = TagManager.Create("Oxygen_Mask");
  public static readonly Tag LeadSuit = TagManager.Create("Lead_Suit");
  public static readonly Tag JetSuit = TagManager.Create("Jet_Suit");
  public static readonly Tag JetSuitOutOfFuel = TagManager.Create(nameof (JetSuitOutOfFuel));
  public static readonly Tag SuitBatteryLow = TagManager.Create(nameof (SuitBatteryLow));
  public static readonly Tag SuitBatteryOut = TagManager.Create(nameof (SuitBatteryOut));
  public static readonly List<Tag> AllSuitTags;
  public static readonly List<Tag> OxygenSuitTags;
  public static readonly Tag EquippableBalloon;
  public static readonly Tag Clothes;
  public static readonly Tag WarmVest;
  public static readonly Tag CoolVest;
  public static readonly Tag FunkyVest;
  public static readonly List<Tag> AllClothesTags;
  public static readonly Tag Assigned;
  public static readonly Tag Helmet;
  public static readonly Tag Equipped;
  public static readonly Tag Entombed;
  public static readonly Tag Uprooted;
  public static readonly Tag Preserved;
  public static readonly Tag Compostable;
  public static readonly Tag Pickled;
  public static readonly Tag UnspicedFood;
  public static readonly Tag SpicedFood;
  public static readonly Tag Dying;
  public static readonly Tag Dead;
  public static readonly Tag Reachable;
  public static readonly Tag PreventChoreInterruption;
  public static readonly Tag PerformingWorkRequest;
  public static readonly Tag RecoveringBreath;
  public static readonly Tag NoOxygen;
  public static readonly Tag Idle;
  public static readonly Tag StationaryIdling;
  public static readonly Tag AlwaysConverse;
  public static readonly Tag HasDebugDestination;
  public static readonly Tag Shaded;
  public static readonly Tag TakingMedicine;
  public static readonly Tag Partying;
  public static readonly Tag MakingMess;
  public static readonly Tag DupeBrain;
  public static readonly Tag CreatureBrain;
  public static readonly Tag Asleep;
  public static readonly Tag HoldingBreath;
  public static readonly Tag Overjoyed;
  public static readonly Tag PleasantConversation;
  public static readonly Tag HasSuitTank;
  public static readonly Tag NoCreatureIdling;
  public static readonly Tag UnderConstruction;
  public static readonly Tag Operational;
  public static readonly Tag JetSuitBlocker;
  public static readonly Tag HasInvalidPorts;
  public static readonly Tag NotRoomAssignable;
  public static readonly Tag OneTimeUseLure;
  public static readonly Tag LureUsed;
  public static readonly Tag TemplateBuilding;
  public static readonly Tag ModularConduitPort;
  public static readonly Tag WarpTech;
  public static readonly Tag HEPPassThrough;
  public static readonly Tag TelephoneRinging;
  public static readonly Tag LongDistanceCall;
  public static readonly Tag Telepad;
  public static readonly Tag InTransitTube;
  public static readonly Tag GeyserFeature;
  public static readonly Tag Rocket;
  public static readonly Tag RocketOnGround;
  public static readonly Tag RocketNotOnGround;
  public static readonly Tag RocketInSpace;
  public static readonly Tag RocketStranded;
  public static readonly Tag RailGunPayloadEmptyable;
  public static readonly Tag TransferringCargoComplete;
  public static readonly Tag NoseRocketModule;
  public static readonly Tag LaunchButtonRocketModule;
  public static readonly Tag RocketInteriorBuilding;
  public static readonly Tag NotRocketInteriorBuilding;
  public static readonly Tag UniquePerWorld;
  public static readonly Tag RocketEnvelopeTile;
  public static readonly Tag NoRocketRefund;
  public static readonly Tag RocketModule;
  public static readonly Tag GantryExtended;
  public static readonly Tag POIHarvesting;
  public static readonly Tag BallisticEntityLanding;
  public static readonly Tag BallisticEntityLaunching;
  public static readonly Tag BallisticEntityMoving;
  public static readonly Tag ClusterEntityGrounded;
  public static readonly Tag EntityInSpace;
  public static readonly Tag Monument;
  public static readonly Tag Stored;
  public static readonly Tag StoredPrivate;
  public static readonly Tag Sealed;
  public static readonly Tag CorrosionProof;
  public static readonly Tag UnidentifiedSeed;
  public static readonly Tag CropSeed;
  public static readonly Tag DecorSeed;
  public static readonly Tag WaterSeed;
  public static readonly Tag Harvestable;
  public static readonly Tag Hanging;
  public static readonly Tag FarmingMaterial;
  public static readonly Tag MutatedSeed;
  public static readonly Tag OverlayInFrontOfConduits;
  public static readonly Tag OverlayBehindConduits;
  public static readonly Tag MassChunk;
  public static readonly Tag UnitChunk;
  public static readonly Tag NotConversationTopic;
  public static readonly Tag MinionSelectPreview;
  public static readonly Tag Empty;
  public static readonly Tag SpaceDanger;
  public static TagSet SolidElements;
  public static TagSet LiquidElements;
  public static TagSet GasElements;
  public static TagSet CalorieCategories;
  public static TagSet UnitCategories;
  public static TagSet IgnoredMaterialCategories;
  public static TagSet MaterialCategories;
  public static TagSet MaterialBuildingElements;
  public static TagSet OtherEntityTags;
  public static TagSet AllCategories;
  public static TagSet DisplayAsCalories;
  public static TagSet DisplayAsUnits;
  public static TagSet DisplayAsInformation;

  static GameTags()
  {
    List<Tag> tagList1 = new List<Tag>();
    tagList1.Add(GameTags.Suit);
    tagList1.Add(GameTags.AtmoSuit);
    tagList1.Add(GameTags.JetSuit);
    tagList1.Add(GameTags.LeadSuit);
    GameTags.AllSuitTags = tagList1;
    List<Tag> tagList2 = new List<Tag>();
    tagList2.Add(GameTags.AtmoSuit);
    tagList2.Add(GameTags.JetSuit);
    tagList2.Add(GameTags.LeadSuit);
    GameTags.OxygenSuitTags = tagList2;
    GameTags.EquippableBalloon = TagManager.Create(nameof (EquippableBalloon));
    GameTags.Clothes = TagManager.Create(nameof (Clothes));
    GameTags.WarmVest = TagManager.Create("Warm_Vest");
    GameTags.CoolVest = TagManager.Create("Cool_Vest");
    GameTags.FunkyVest = TagManager.Create("Funky_Vest");
    List<Tag> tagList3 = new List<Tag>();
    tagList3.Add(GameTags.Clothes);
    tagList3.Add(GameTags.WarmVest);
    tagList3.Add(GameTags.CoolVest);
    tagList3.Add(GameTags.FunkyVest);
    GameTags.AllClothesTags = tagList3;
    GameTags.Assigned = TagManager.Create(nameof (Assigned));
    GameTags.Helmet = TagManager.Create(nameof (Helmet));
    GameTags.Equipped = TagManager.Create(nameof (Equipped));
    GameTags.Entombed = TagManager.Create(nameof (Entombed));
    GameTags.Uprooted = TagManager.Create(nameof (Uprooted));
    GameTags.Preserved = TagManager.Create(nameof (Preserved));
    GameTags.Compostable = TagManager.Create(nameof (Compostable));
    GameTags.Pickled = TagManager.Create(nameof (Pickled));
    GameTags.UnspicedFood = TagManager.Create(nameof (UnspicedFood));
    GameTags.SpicedFood = TagManager.Create(nameof (SpicedFood));
    GameTags.Dying = TagManager.Create(nameof (Dying));
    GameTags.Dead = TagManager.Create(nameof (Dead));
    GameTags.Reachable = TagManager.Create(nameof (Reachable));
    GameTags.PreventChoreInterruption = TagManager.Create(nameof (PreventChoreInterruption));
    GameTags.PerformingWorkRequest = TagManager.Create(nameof (PerformingWorkRequest));
    GameTags.RecoveringBreath = TagManager.Create(nameof (RecoveringBreath));
    GameTags.NoOxygen = TagManager.Create(nameof (NoOxygen));
    GameTags.Idle = TagManager.Create(nameof (Idle));
    GameTags.StationaryIdling = TagManager.Create(nameof (StationaryIdling));
    GameTags.AlwaysConverse = TagManager.Create(nameof (AlwaysConverse));
    GameTags.HasDebugDestination = TagManager.Create(nameof (HasDebugDestination));
    GameTags.Shaded = TagManager.Create(nameof (Shaded));
    GameTags.TakingMedicine = TagManager.Create(nameof (TakingMedicine));
    GameTags.Partying = TagManager.Create(nameof (Partying));
    GameTags.MakingMess = TagManager.Create(nameof (MakingMess));
    GameTags.DupeBrain = TagManager.Create(nameof (DupeBrain));
    GameTags.CreatureBrain = TagManager.Create(nameof (CreatureBrain));
    GameTags.Asleep = TagManager.Create(nameof (Asleep));
    GameTags.HoldingBreath = TagManager.Create(nameof (HoldingBreath));
    GameTags.Overjoyed = TagManager.Create(nameof (Overjoyed));
    GameTags.PleasantConversation = TagManager.Create(nameof (PleasantConversation));
    GameTags.HasSuitTank = TagManager.Create(nameof (HasSuitTank));
    GameTags.NoCreatureIdling = TagManager.Create(nameof (NoCreatureIdling));
    GameTags.UnderConstruction = TagManager.Create(nameof (UnderConstruction));
    GameTags.Operational = TagManager.Create(nameof (Operational));
    GameTags.JetSuitBlocker = TagManager.Create(nameof (JetSuitBlocker));
    GameTags.HasInvalidPorts = TagManager.Create(nameof (HasInvalidPorts));
    GameTags.NotRoomAssignable = TagManager.Create(nameof (NotRoomAssignable));
    GameTags.OneTimeUseLure = TagManager.Create(nameof (OneTimeUseLure));
    GameTags.LureUsed = TagManager.Create(nameof (LureUsed));
    GameTags.TemplateBuilding = TagManager.Create(nameof (TemplateBuilding));
    GameTags.ModularConduitPort = TagManager.Create(nameof (ModularConduitPort));
    GameTags.WarpTech = TagManager.Create(nameof (WarpTech));
    GameTags.HEPPassThrough = TagManager.Create(nameof (HEPPassThrough));
    GameTags.TelephoneRinging = TagManager.Create(nameof (TelephoneRinging));
    GameTags.LongDistanceCall = TagManager.Create(nameof (LongDistanceCall));
    GameTags.Telepad = TagManager.Create(nameof (Telepad));
    GameTags.InTransitTube = TagManager.Create(nameof (InTransitTube));
    GameTags.GeyserFeature = TagManager.Create(nameof (GeyserFeature));
    GameTags.Rocket = TagManager.Create(nameof (Rocket));
    GameTags.RocketOnGround = TagManager.Create(nameof (RocketOnGround));
    GameTags.RocketNotOnGround = TagManager.Create(nameof (RocketNotOnGround));
    GameTags.RocketInSpace = TagManager.Create(nameof (RocketInSpace));
    GameTags.RocketStranded = TagManager.Create(nameof (RocketStranded));
    GameTags.RailGunPayloadEmptyable = TagManager.Create(nameof (RailGunPayloadEmptyable));
    GameTags.TransferringCargoComplete = TagManager.Create(nameof (TransferringCargoComplete));
    GameTags.NoseRocketModule = TagManager.Create(nameof (NoseRocketModule));
    GameTags.LaunchButtonRocketModule = TagManager.Create(nameof (LaunchButtonRocketModule));
    GameTags.RocketInteriorBuilding = TagManager.Create(nameof (RocketInteriorBuilding));
    GameTags.NotRocketInteriorBuilding = TagManager.Create(nameof (NotRocketInteriorBuilding));
    GameTags.UniquePerWorld = TagManager.Create(nameof (UniquePerWorld));
    GameTags.RocketEnvelopeTile = TagManager.Create(nameof (RocketEnvelopeTile));
    GameTags.NoRocketRefund = TagManager.Create(nameof (NoRocketRefund));
    GameTags.RocketModule = TagManager.Create(nameof (RocketModule));
    GameTags.GantryExtended = TagManager.Create(nameof (GantryExtended));
    GameTags.POIHarvesting = TagManager.Create(nameof (POIHarvesting));
    GameTags.BallisticEntityLanding = TagManager.Create(nameof (BallisticEntityLanding));
    GameTags.BallisticEntityLaunching = TagManager.Create(nameof (BallisticEntityLaunching));
    GameTags.BallisticEntityMoving = TagManager.Create(nameof (BallisticEntityMoving));
    GameTags.ClusterEntityGrounded = TagManager.Create("ClusterEntityGrounded ");
    GameTags.EntityInSpace = TagManager.Create(nameof (EntityInSpace));
    GameTags.Monument = TagManager.Create(nameof (Monument));
    GameTags.Stored = TagManager.Create(nameof (Stored));
    GameTags.StoredPrivate = TagManager.Create(nameof (StoredPrivate));
    GameTags.Sealed = TagManager.Create(nameof (Sealed));
    GameTags.CorrosionProof = TagManager.Create(nameof (CorrosionProof));
    GameTags.UnidentifiedSeed = TagManager.Create(nameof (UnidentifiedSeed));
    GameTags.CropSeed = TagManager.Create(nameof (CropSeed));
    GameTags.DecorSeed = TagManager.Create(nameof (DecorSeed));
    GameTags.WaterSeed = TagManager.Create(nameof (WaterSeed));
    GameTags.Harvestable = TagManager.Create(nameof (Harvestable));
    GameTags.Hanging = TagManager.Create(nameof (Hanging));
    GameTags.FarmingMaterial = TagManager.Create(nameof (FarmingMaterial));
    GameTags.MutatedSeed = TagManager.Create(nameof (MutatedSeed));
    GameTags.OverlayInFrontOfConduits = TagManager.Create("OverlayFrontLayer");
    GameTags.OverlayBehindConduits = TagManager.Create("OverlayBackLayer");
    GameTags.MassChunk = TagManager.Create(nameof (MassChunk));
    GameTags.UnitChunk = TagManager.Create(nameof (UnitChunk));
    GameTags.NotConversationTopic = TagManager.Create(nameof (NotConversationTopic));
    GameTags.MinionSelectPreview = TagManager.Create(nameof (MinionSelectPreview));
    GameTags.Empty = TagManager.Create(nameof (Empty));
    GameTags.SpaceDanger = TagManager.Create(nameof (SpaceDanger));
    GameTags.SolidElements = new TagSet();
    GameTags.LiquidElements = new TagSet();
    GameTags.GasElements = new TagSet();
    TagSet tagSet1 = new TagSet();
    tagSet1.Add(GameTags.Edible);
    GameTags.CalorieCategories = tagSet1;
    TagSet tagSet2 = new TagSet();
    tagSet2.Add(GameTags.Medicine);
    tagSet2.Add(GameTags.MedicalSupplies);
    tagSet2.Add(GameTags.Seed);
    tagSet2.Add(GameTags.Egg);
    tagSet2.Add(GameTags.Clothes);
    tagSet2.Add(GameTags.IndustrialIngredient);
    tagSet2.Add(GameTags.Compostable);
    tagSet2.Add(GameTags.HighEnergyParticle);
    tagSet2.Add(GameTags.StoryTraitResource);
    GameTags.UnitCategories = tagSet2;
    TagSet tagSet3 = new TagSet();
    tagSet3.Add(GameTags.Special);
    tagSet3.Add(GameTags.IgnoreMaterialCategory);
    GameTags.IgnoredMaterialCategories = tagSet3;
    TagSet tagSet4 = new TagSet();
    tagSet4.Add(GameTags.Alloy);
    tagSet4.Add(GameTags.Metal);
    tagSet4.Add(GameTags.RefinedMetal);
    tagSet4.Add(GameTags.BuildableRaw);
    tagSet4.Add(GameTags.BuildableProcessed);
    tagSet4.Add(GameTags.Filter);
    tagSet4.Add(GameTags.Liquifiable);
    tagSet4.Add(GameTags.Liquid);
    tagSet4.Add(GameTags.Breathable);
    tagSet4.Add(GameTags.Unbreathable);
    tagSet4.Add(GameTags.ConsumableOre);
    tagSet4.Add(GameTags.Organics);
    tagSet4.Add(GameTags.Farmable);
    tagSet4.Add(GameTags.Agriculture);
    tagSet4.Add(GameTags.Other);
    tagSet4.Add(GameTags.ManufacturedMaterial);
    tagSet4.Add(GameTags.CookingIngredient);
    tagSet4.Add(GameTags.RareMaterials);
    GameTags.MaterialCategories = tagSet4;
    TagSet tagSet5 = new TagSet();
    tagSet5.Add(GameTags.BuildingFiber);
    tagSet5.Add(GameTags.BuildingWood);
    GameTags.MaterialBuildingElements = tagSet5;
    TagSet tagSet6 = new TagSet();
    tagSet6.Add(GameTags.BagableCreature);
    tagSet6.Add(GameTags.SwimmingCreature);
    tagSet6.Add(GameTags.MiscPickupable);
    GameTags.OtherEntityTags = tagSet6;
    GameTags.AllCategories = new TagSet(new TagSet[5]
    {
      GameTags.CalorieCategories,
      GameTags.UnitCategories,
      GameTags.MaterialCategories,
      GameTags.MaterialBuildingElements,
      GameTags.OtherEntityTags
    });
    GameTags.DisplayAsCalories = new TagSet(GameTags.CalorieCategories);
    GameTags.DisplayAsUnits = new TagSet(GameTags.UnitCategories);
    GameTags.DisplayAsInformation = new TagSet();
  }

  public abstract class ChoreTypes
  {
    public static readonly Tag Farming = TagManager.Create(nameof (Farming));
    public static readonly Tag Ranching = TagManager.Create(nameof (Ranching));
    public static readonly Tag Research = TagManager.Create(nameof (Research));
    public static readonly Tag Power = TagManager.Create(nameof (Power));
    public static readonly Tag Building = TagManager.Create(nameof (Building));
    public static readonly Tag Cooking = TagManager.Create(nameof (Cooking));
    public static readonly Tag Fabricating = TagManager.Create(nameof (Fabricating));
    public static readonly Tag Wiring = TagManager.Create(nameof (Wiring));
    public static readonly Tag Art = TagManager.Create(nameof (Art));
    public static readonly Tag Digging = TagManager.Create(nameof (Digging));
    public static readonly Tag Doctoring = TagManager.Create(nameof (Doctoring));
    public static readonly Tag Conveyor = TagManager.Create(nameof (Conveyor));
  }

  public static class Creatures
  {
    public static readonly Tag ReservedByCreature = TagManager.Create(nameof (ReservedByCreature));
    public static readonly Tag Bagged = TagManager.Create(nameof (Bagged));
    public static readonly Tag InIncubator = TagManager.Create(nameof (InIncubator));
    public static readonly Tag Deliverable = TagManager.Create(nameof (Deliverable));
    public static readonly Tag Stunned = TagManager.Create(nameof (Stunned));
    public static readonly Tag Falling = TagManager.Create(nameof (Falling));
    public static readonly Tag Flopping = TagManager.Create(nameof (Flopping));
    public static readonly Tag WantsToEnterBurrow = TagManager.Create("WantsToBurrow");
    public static readonly Tag Burrowed = TagManager.Create(nameof (Burrowed));
    public static readonly Tag WantsToExitBurrow = TagManager.Create(nameof (WantsToExitBurrow));
    public static readonly Tag WantsToEat = TagManager.Create(nameof (WantsToEat));
    public static readonly Tag WantsToGetRanched = TagManager.Create(nameof (WantsToGetRanched));
    public static readonly Tag WantsToGetCaptured = TagManager.Create(nameof (WantsToGetCaptured));
    public static readonly Tag WantsToClimbTree = TagManager.Create(nameof (WantsToClimbTree));
    public static readonly Tag WantsToPlantSeed = TagManager.Create(nameof (WantsToPlantSeed));
    public static readonly Tag WantsToForage = TagManager.Create(nameof (WantsToForage));
    public static readonly Tag WantsToLayEgg = TagManager.Create(nameof (WantsToLayEgg));
    public static readonly Tag WantsToTendEgg = TagManager.Create(nameof (WantsToTendEgg));
    public static readonly Tag WantsAHug = TagManager.Create(nameof (WantsAHug));
    public static readonly Tag WantsConduitConnection = TagManager.Create(nameof (WantsConduitConnection));
    public static readonly Tag WantsToGoHome = TagManager.Create(nameof (WantsToGoHome));
    public static readonly Tag WantsToMakeHome = TagManager.Create(nameof (WantsToMakeHome));
    public static readonly Tag BeeWantsToSleep = TagManager.Create(nameof (BeeWantsToSleep));
    public static readonly Tag WantsToTendCrops = TagManager.Create("WantsToTendPlants");
    public static readonly Tag WantsToStore = TagManager.Create(nameof (WantsToStore));
    public static readonly Tag Flee = TagManager.Create(nameof (Flee));
    public static readonly Tag Attack = TagManager.Create(nameof (Attack));
    public static readonly Tag Defend = TagManager.Create(nameof (Defend));
    public static readonly Tag ReturnToEgg = TagManager.Create(nameof (ReturnToEgg));
    public static readonly Tag CrabFriend = TagManager.Create(nameof (CrabFriend));
    public static readonly Tag Die = TagManager.Create(nameof (Die));
    public static readonly Tag Poop = TagManager.Create(nameof (Poop));
    public static readonly Tag MoveToLure = TagManager.Create(nameof (MoveToLure));
    public static readonly Tag Drowning = TagManager.Create(nameof (Drowning));
    public static readonly Tag Hungry = TagManager.Create(nameof (Hungry));
    public static readonly Tag Flyer = TagManager.Create(nameof (Flyer));
    public static readonly Tag FishTrapLure = TagManager.Create(nameof (FishTrapLure));
    public static readonly Tag Walker = TagManager.Create(nameof (Walker));
    public static readonly Tag Hoverer = TagManager.Create(nameof (Hoverer));
    public static readonly Tag Swimmer = TagManager.Create(nameof (Swimmer));
    public static readonly Tag Fertile = TagManager.Create(nameof (Fertile));
    public static readonly Tag Submerged = TagManager.Create(nameof (Submerged));
    public static readonly Tag ExitSubmerged = TagManager.Create(nameof (ExitSubmerged));
    public static readonly Tag WantsToDropElements = TagManager.Create(nameof (WantsToDropElements));
    public static readonly Tag OriginallyWild = TagManager.Create(nameof (Wild));
    public static readonly Tag Wild = TagManager.Create(nameof (Wild));
    public static readonly Tag Overcrowded = TagManager.Create(nameof (Overcrowded));
    public static readonly Tag Expecting = TagManager.Create(nameof (Expecting));
    public static readonly Tag Confined = TagManager.Create(nameof (Confined));
    public static readonly Tag Digger = TagManager.Create(nameof (Digger));
    public static readonly Tag Tunnel = TagManager.Create(nameof (Tunnel));
    public static readonly Tag Builder = TagManager.Create(nameof (Builder));
    public static readonly Tag ScalesGrown = TagManager.Create(nameof (ScalesGrown));
    public static readonly Tag CanMolt = TagManager.Create(nameof (CanMolt));
    public static readonly Tag CantReachEgg = TagManager.Create(nameof (CantReachEgg));
    public static readonly Tag HasNoFoundation = TagManager.Create(nameof (HasNoFoundation));
    public static readonly Tag Cleaning = TagManager.Create(nameof (Cleaning));
    public static readonly Tag Unhappy = TagManager.Create(nameof (Unhappy));

    public static class Species
    {
      public static readonly Tag HatchSpecies = TagManager.Create(nameof (HatchSpecies));
      public static readonly Tag LightBugSpecies = TagManager.Create(nameof (LightBugSpecies));
      public static readonly Tag OilFloaterSpecies = TagManager.Create(nameof (OilFloaterSpecies));
      public static readonly Tag DreckoSpecies = TagManager.Create(nameof (DreckoSpecies));
      public static readonly Tag GlomSpecies = TagManager.Create(nameof (GlomSpecies));
      public static readonly Tag PuftSpecies = TagManager.Create(nameof (PuftSpecies));
      public static readonly Tag PacuSpecies = TagManager.Create(nameof (PacuSpecies));
      public static readonly Tag MooSpecies = TagManager.Create(nameof (MooSpecies));
      public static readonly Tag MoleSpecies = TagManager.Create(nameof (MoleSpecies));
      public static readonly Tag SquirrelSpecies = TagManager.Create(nameof (SquirrelSpecies));
      public static readonly Tag CrabSpecies = TagManager.Create(nameof (CrabSpecies));
      public static readonly Tag StaterpillarSpecies = TagManager.Create(nameof (StaterpillarSpecies));
      public static readonly Tag BeetaSpecies = TagManager.Create(nameof (BeetaSpecies));
      public static readonly Tag DivergentSpecies = TagManager.Create(nameof (DivergentSpecies));
    }

    public static class Behaviours
    {
      public static readonly Tag HarvestHiveBehaviour = TagManager.Create(nameof (HarvestHiveBehaviour));
      public static readonly Tag GrowUpBehaviour = TagManager.Create(nameof (GrowUpBehaviour));
      public static readonly Tag SleepBehaviour = TagManager.Create(nameof (SleepBehaviour));
      public static readonly Tag CallAdultBehaviour = TagManager.Create(nameof (CallAdultBehaviour));
      public static readonly Tag SearchForEggBehaviour = TagManager.Create(nameof (SearchForEggBehaviour));
      public static readonly Tag PlayInterruptAnim = TagManager.Create(nameof (PlayInterruptAnim));
      public static readonly Tag DisableCreature = TagManager.Create(nameof (DisableCreature));
    }
  }

  public static class Robots
  {
    public static class Models
    {
      public static readonly Tag SweepBot = TagManager.Create(nameof (SweepBot));
      public static readonly Tag ScoutRover = TagManager.Create(nameof (ScoutRover));
    }

    public static class Behaviours
    {
      public static readonly Tag UnloadBehaviour = TagManager.Create(nameof (UnloadBehaviour));
      public static readonly Tag RechargeBehaviour = TagManager.Create(nameof (RechargeBehaviour));
      public static readonly Tag EmoteBehaviour = TagManager.Create(nameof (EmoteBehaviour));
      public static readonly Tag TrappedBehaviour = TagManager.Create(nameof (TrappedBehaviour));
    }
  }
}
